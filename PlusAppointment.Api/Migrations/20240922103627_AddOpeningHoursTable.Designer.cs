// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PlusAppointment.Data;

#nullable disable

namespace PlusAppointment.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240922103627_AddOpeningHoursTable")]
    partial class AddOpeningHoursTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PlusAppointment.Models.Classes.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("appointment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("appointment_time");

                    b.Property<int>("BusinessId")
                        .HasColumnType("integer")
                        .HasColumnName("business_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("AppointmentId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CustomerId");

                    b.ToTable("appointments", (string)null);
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.AppointmentServiceStaffMapping", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer")
                        .HasColumnName("appointment_id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    b.Property<int>("StaffId")
                        .HasColumnType("integer")
                        .HasColumnName("staff_id");

                    b.HasKey("AppointmentId", "ServiceId", "StaffId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StaffId");

                    b.ToTable("appointment_services_staffs", (string)null);
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.Business", b =>
                {
                    b.Property<int>("BusinessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("business_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BusinessId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<int>("UserID")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("BusinessId");

                    b.HasIndex("UserID");

                    b.ToTable("businesses", (string)null);
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<int>("BusinessId")
                        .HasColumnType("integer")
                        .HasColumnName("business_id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("CustomerId");

                    b.HasIndex("BusinessId");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.EmailUsage", b =>
                {
                    b.Property<int>("EmailUsageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("email_usage_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmailUsageId"));

                    b.Property<int>("BusinessId")
                        .HasColumnType("integer")
                        .HasColumnName("business_id");

                    b.Property<int>("EmailCount")
                        .HasColumnType("integer")
                        .HasColumnName("email_count");

                    b.Property<int>("Month")
                        .HasColumnType("integer")
                        .HasColumnName("month");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("EmailUsageId");

                    b.HasIndex("BusinessId", "Year", "Month")
                        .IsUnique();

                    b.ToTable("email_usage", (string)null);
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.NotAvailableDate", b =>
                {
                    b.Property<int>("NotAvailableDateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("not_available_date_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotAvailableDateId"));

                    b.Property<int>("BusinessId")
                        .HasColumnType("integer")
                        .HasColumnName("business_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<int>("StaffId")
                        .HasColumnType("integer")
                        .HasColumnName("staff_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.HasKey("NotAvailableDateId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("StaffId");

                    b.ToTable("not_available_dates", (string)null);
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.NotAvailableTime", b =>
                {
                    b.Property<int>("NotAvailableTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("not_available_time_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotAvailableTimeId"));

                    b.Property<int>("BusinessId")
                        .HasColumnType("integer")
                        .HasColumnName("business_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<DateTime>("From")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("from");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<int>("StaffId")
                        .HasColumnType("integer")
                        .HasColumnName("staff_id");

                    b.Property<DateTime>("To")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("to");

                    b.HasKey("NotAvailableTimeId");

                    b.HasIndex("BusinessId")
                        .HasDatabaseName("IX_NotAvailableTime_BusinessId");

                    b.HasIndex("StaffId")
                        .HasDatabaseName("IX_NotAvailableTime_StaffId");

                    b.HasIndex("Date", "From", "To")
                        .HasDatabaseName("IX_NotAvailableTime_DateRange");

                    b.ToTable("not_available_times", (string)null);
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("notification_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationId"));

                    b.Property<int>("BusinessId")
                        .HasColumnType("integer")
                        .HasColumnName("business_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notification_type");

                    b.HasKey("NotificationId");

                    b.HasIndex("BusinessId")
                        .HasDatabaseName("IX_Notification_BusinessId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Notification_CreatedAt");

                    b.ToTable("notification_table", (string)null);
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.OpeningHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessId")
                        .HasColumnType("integer")
                        .HasColumnName("business_id");

                    b.Property<TimeSpan>("FridayClosingTime")
                        .HasColumnType("interval")
                        .HasColumnName("friday_closing_time");

                    b.Property<TimeSpan>("FridayOpeningTime")
                        .HasColumnType("interval")
                        .HasColumnName("friday_opening_time");

                    b.Property<int>("MinimumAdvanceBookingHours")
                        .HasColumnType("integer")
                        .HasColumnName("minimum_advance_booking_hours");

                    b.Property<TimeSpan>("MondayClosingTime")
                        .HasColumnType("interval")
                        .HasColumnName("monday_closing_time");

                    b.Property<TimeSpan>("MondayOpeningTime")
                        .HasColumnType("interval")
                        .HasColumnName("monday_opening_time");

                    b.Property<TimeSpan>("SaturdayClosingTime")
                        .HasColumnType("interval")
                        .HasColumnName("saturday_closing_time");

                    b.Property<TimeSpan>("SaturdayOpeningTime")
                        .HasColumnType("interval")
                        .HasColumnName("saturday_opening_time");

                    b.Property<TimeSpan>("SundayClosingTime")
                        .HasColumnType("interval")
                        .HasColumnName("sunday_closing_time");

                    b.Property<TimeSpan>("SundayOpeningTime")
                        .HasColumnType("interval")
                        .HasColumnName("sunday_opening_time");

                    b.Property<TimeSpan>("ThursdayClosingTime")
                        .HasColumnType("interval")
                        .HasColumnName("thursday_closing_time");

                    b.Property<TimeSpan>("ThursdayOpeningTime")
                        .HasColumnType("interval")
                        .HasColumnName("thursday_opening_time");

                    b.Property<TimeSpan>("TuesdayClosingTime")
                        .HasColumnType("interval")
                        .HasColumnName("tuesday_closing_time");

                    b.Property<TimeSpan>("TuesdayOpeningTime")
                        .HasColumnType("interval")
                        .HasColumnName("tuesday_opening_time");

                    b.Property<TimeSpan>("WednesdayClosingTime")
                        .HasColumnType("interval")
                        .HasColumnName("wednesday_closing_time");

                    b.Property<TimeSpan>("WednesdayOpeningTime")
                        .HasColumnType("interval")
                        .HasColumnName("wednesday_opening_time");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId")
                        .HasDatabaseName("IX_OpeningHours_BusinessId");

                    b.ToTable("opening_hours", (string)null);
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServiceId"));

                    b.Property<int>("BusinessId")
                        .HasColumnType("integer")
                        .HasColumnName("business_id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("ServiceId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CategoryId");

                    b.ToTable("services", (string)null);
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.ServiceCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("CategoryId");

                    b.ToTable("service_categories", (string)null);
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.ShopPicture", b =>
                {
                    b.Property<int>("ShopPictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("shop_picture_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShopPictureId"));

                    b.Property<int>("BusinessId")
                        .HasColumnType("integer")
                        .HasColumnName("business_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("S3ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("s3_image_url");

                    b.HasKey("ShopPictureId");

                    b.HasIndex("BusinessId")
                        .HasDatabaseName("IX_ShopPictures_BusinessId");

                    b.ToTable("shop_pictures", (string)null);
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("staff_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StaffId"));

                    b.Property<int>("BusinessId")
                        .HasColumnType("integer")
                        .HasColumnName("business_id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("StaffId");

                    b.HasIndex("BusinessId");

                    b.ToTable("staffs", (string)null);
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry_time");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("user_refresh_tokens", (string)null);
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.Appointment", b =>
                {
                    b.HasOne("PlusAppointment.Models.Classes.Business", "Business")
                        .WithMany("Appointments")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlusAppointment.Models.Classes.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.AppointmentServiceStaffMapping", b =>
                {
                    b.HasOne("PlusAppointment.Models.Classes.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlusAppointment.Models.Classes.Service", "Service")
                        .WithMany("AppointmentServicesStaffs")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlusAppointment.Models.Classes.Staff", "Staff")
                        .WithMany("AppointmentServicesStaffs")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Service");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.Business", b =>
                {
                    b.HasOne("PlusAppointment.Models.Classes.User", "User")
                        .WithMany("Businesses")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.Customer", b =>
                {
                    b.HasOne("PlusAppointment.Models.Classes.Business", "Business")
                        .WithMany("Customers")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.EmailUsage", b =>
                {
                    b.HasOne("PlusAppointment.Models.Classes.Business", "Business")
                        .WithMany("EmailUsages")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.NotAvailableDate", b =>
                {
                    b.HasOne("PlusAppointment.Models.Classes.Business", "Business")
                        .WithMany("NotAvailableDates")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlusAppointment.Models.Classes.Staff", "Staff")
                        .WithMany("NotAvailableDates")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.NotAvailableTime", b =>
                {
                    b.HasOne("PlusAppointment.Models.Classes.Business", "Business")
                        .WithMany("NotAvailableTimes")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlusAppointment.Models.Classes.Staff", "Staff")
                        .WithMany("NotAvailableTimes")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.Notification", b =>
                {
                    b.HasOne("PlusAppointment.Models.Classes.Business", "Business")
                        .WithMany("Notifications")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.OpeningHours", b =>
                {
                    b.HasOne("PlusAppointment.Models.Classes.Business", null)
                        .WithMany("OpeningHours")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.Service", b =>
                {
                    b.HasOne("PlusAppointment.Models.Classes.Business", "Business")
                        .WithMany("Services")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlusAppointment.Models.Classes.ServiceCategory", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Business");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.ShopPicture", b =>
                {
                    b.HasOne("PlusAppointment.Models.Classes.Business", "Business")
                        .WithMany("ShopPictures")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.Staff", b =>
                {
                    b.HasOne("PlusAppointment.Models.Classes.Business", "Business")
                        .WithMany("Staffs")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.UserRefreshToken", b =>
                {
                    b.HasOne("PlusAppointment.Models.Classes.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.Appointment", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.Business", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Customers");

                    b.Navigation("EmailUsages");

                    b.Navigation("NotAvailableDates");

                    b.Navigation("NotAvailableTimes");

                    b.Navigation("Notifications");

                    b.Navigation("OpeningHours");

                    b.Navigation("Services");

                    b.Navigation("ShopPictures");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.Customer", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.Service", b =>
                {
                    b.Navigation("AppointmentServicesStaffs");
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.ServiceCategory", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.Staff", b =>
                {
                    b.Navigation("AppointmentServicesStaffs");

                    b.Navigation("NotAvailableDates");

                    b.Navigation("NotAvailableTimes");
                });

            modelBuilder.Entity("PlusAppointment.Models.Classes.User", b =>
                {
                    b.Navigation("Businesses");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
